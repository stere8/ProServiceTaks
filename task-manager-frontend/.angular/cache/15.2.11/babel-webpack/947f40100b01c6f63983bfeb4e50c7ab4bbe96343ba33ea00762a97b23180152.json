{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TaskService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'https://localhost:7281/api/tasks';\n  }\n  /**\r\n   * Fetches the tasks already assigned to a user,\r\n   * unwraps the paginated response and returns the raw Task[].\r\n   */\n  getAssignedTasks(userId) {\n    return this.http.get(`${this.baseUrl}/assigned/${userId}`).pipe(map(response => response.data) // ← here we extract the array\n    );\n  }\n  /**\r\n   * Fetches the tasks available for assignment to a user,\r\n   * unwraps the paginated response and returns the raw Task[].\r\n   */\n  getAvailableTasks(userId) {\n    return this.http.get(`${this.baseUrl}/available/${userId}`).pipe(map(response => response.data));\n  }\n  /**\r\n   * Assigns the given task IDs to the specified user.\r\n   * Returns { isSuccess, message } from the API.\r\n   */\n  assignTasks(userId, taskIds) {\n    return this.http.post(`${this.baseUrl}/assign/${userId}`, {\n      userId,\n      taskIds\n    });\n  }\n  static {\n    this.ɵfac = function TaskService_Factory(t) {\n      return new (t || TaskService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TaskService,\n      factory: TaskService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AAIA,SAASA,GAAG,QAAQ,gBAAgB;;;AAOpC,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,YAAO,GAAG,kCAAkC;EAEZ;EAExC;;;;EAIAC,gBAAgB,CAACC,MAAc;IAC7B,OAAO,IAAI,CAACF,IAAI,CACbG,GAAG,CAA0B,GAAG,IAAI,CAACC,OAAO,aAAaF,MAAM,EAAE,CAAC,CAClEG,IAAI,CACHR,GAAG,CAACS,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAI;IAAA,CACnC;EACL;EAEA;;;;EAIAC,iBAAiB,CAACN,MAAc;IAC9B,OAAO,IAAI,CAACF,IAAI,CACbG,GAAG,CAA0B,GAAG,IAAI,CAACC,OAAO,cAAcF,MAAM,EAAE,CAAC,CACnEG,IAAI,CACHR,GAAG,CAACS,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAC/B;EACL;EAEA;;;;EAIAE,WAAW,CACTP,MAAc,EACdQ,OAAiB;IAEjB,OAAO,IAAI,CAACV,IAAI,CAACW,IAAI,CACnB,GAAG,IAAI,CAACP,OAAO,WAAWF,MAAM,EAAE,EAClC;MAAEA,MAAM;MAAEQ;IAAO,CAAE,CACpB;EACH;;;uBAzCWZ,WAAW;IAAA;EAAA;;;aAAXA,WAAW;MAAAc,SAAXd,WAAW;MAAAe,YAFV;IAAM;EAAA","names":["map","TaskService","constructor","http","getAssignedTasks","userId","get","baseUrl","pipe","response","data","getAvailableTasks","assignTasks","taskIds","post","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\oracle.admin\\source\\ProService\\ProServiceTaks\\task-manager-frontend\\src\\app\\services\\task.service.ts"],"sourcesContent":["// src/app/services/task.service.ts\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Task } from '../models/task.model';\nimport { PaginatedResponse } from '../models/paginated-response';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TaskService {\n  private baseUrl = 'https://localhost:7281/api/tasks';\n\n  constructor(private http: HttpClient) { }\n\n  /**\n   * Fetches the tasks already assigned to a user,\n   * unwraps the paginated response and returns the raw Task[].\n   */\n  getAssignedTasks(userId: number): Observable<Task[]> {\n    return this.http\n      .get<PaginatedResponse<Task>>(`${this.baseUrl}/assigned/${userId}`)\n      .pipe(\n        map(response => response.data)    // ← here we extract the array\n      );\n  }\n\n  /**\n   * Fetches the tasks available for assignment to a user,\n   * unwraps the paginated response and returns the raw Task[].\n   */\n  getAvailableTasks(userId: number): Observable<Task[]> {\n    return this.http\n      .get<PaginatedResponse<Task>>(`${this.baseUrl}/available/${userId}`)\n      .pipe(\n        map(response => response.data)\n      );\n  }\n\n  /**\n   * Assigns the given task IDs to the specified user.\n   * Returns { isSuccess, message } from the API.\n   */\n  assignTasks(\n    userId: number,\n    taskIds: number[]\n  ): Observable<{ isSuccess: boolean; message: string }> {\n    return this.http.post<{ isSuccess: boolean; message: string }>(\n      `${this.baseUrl}/assign/${userId}`,\n      { userId, taskIds }\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}