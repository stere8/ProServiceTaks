{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class TaskService {\n  constructor() {\n    // Mocked task list: include at least some tasks with various difficulty, assignment states, etc.\n    this.tasks = [{\n      id: 101,\n      shortDescription: 'Implement login functionality',\n      difficulty: 3,\n      taskType: 'Implementation',\n      implementationContent: 'Develop user authentication module.',\n      status: 'ToDo'\n    }, {\n      id: 102,\n      shortDescription: 'Deploy new feature',\n      difficulty: 4,\n      taskType: 'Deployment',\n      deadline: new Date('2025-08-20'),\n      deploymentScope: 'Deploy the new dashboard feature.',\n      status: 'ToDo'\n    }, {\n      id: 103,\n      shortDescription: 'Server maintenance',\n      difficulty: 5,\n      taskType: 'Maintenance',\n      deadline: new Date('2025-09-01'),\n      listOfServices: 'Patch update, disk cleanup',\n      listOfServers: 'Server1, Server2',\n      status: 'ToDo'\n    }\n    // ... Add enough tasks to meet your requirements (e.g., at least 15 tasks overall)\n    ];\n  }\n  // Returns all tasks (for pagination, you might later modify this method)\n  getAllTasks() {\n    return this.tasks;\n  }\n  // Returns tasks that are already assigned to a specific user\n  getAssignedTasks(userId) {\n    return this.tasks.filter(task => task.assignedUserId === userId);\n  }\n  // Returns tasks that are not assigned (available for assignment)\n  getAvailableTasks() {\n    return this.tasks.filter(task => !task.assignedUserId);\n  }\n  // Assigns selected tasks to a user and returns a response object\n  assignTasks(userId, selectedTaskIds) {\n    // Loop through tasks and assign if valid\n    selectedTaskIds.forEach(taskId => {\n      const task = this.tasks.find(t => t.id === taskId);\n      if (task) {\n        task.assignedUserId = userId;\n      }\n    });\n    // In real scenarios, here you'd add additional validation and maybe failure responses\n    return {\n      isSuccess: true,\n      message: 'Tasks assigned successfully.'\n    };\n  }\n  static {\n    this.ɵfac = function TaskService_Factory(t) {\n      return new (t || TaskService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TaskService,\n      factory: TaskService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":";AAOA,OAAM,MAAOA,WAAW;EAiCtBC;IAhCA;IACQ,UAAK,GAAW,CACtB;MACEC,EAAE,EAAE,GAAG;MACPC,gBAAgB,EAAE,+BAA+B;MACjDC,UAAU,EAAE,CAAC;MACbC,QAAQ,EAAE,gBAAgB;MAC1BC,qBAAqB,EAAE,qCAAqC;MAC5DC,MAAM,EAAE;KACT,EACD;MACEL,EAAE,EAAE,GAAG;MACPC,gBAAgB,EAAE,oBAAoB;MACtCC,UAAU,EAAE,CAAC;MACbC,QAAQ,EAAE,YAAY;MACtBG,QAAQ,EAAE,IAAIC,IAAI,CAAC,YAAY,CAAC;MAChCC,eAAe,EAAE,mCAAmC;MACpDH,MAAM,EAAE;KACT,EACD;MACEL,EAAE,EAAE,GAAG;MACPC,gBAAgB,EAAE,oBAAoB;MACtCC,UAAU,EAAE,CAAC;MACbC,QAAQ,EAAE,aAAa;MACvBG,QAAQ,EAAE,IAAIC,IAAI,CAAC,YAAY,CAAC;MAChCE,cAAc,EAAE,4BAA4B;MAC5CC,aAAa,EAAE,kBAAkB;MACjCL,MAAM,EAAE;;IAEV;IAAA,CACD;EAEe;EAEhB;EACAM,WAAW;IACT,OAAO,IAAI,CAACC,KAAK;EACnB;EAEA;EACAC,gBAAgB,CAACC,MAAc;IAC7B,OAAO,IAAI,CAACF,KAAK,CAACG,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,cAAc,KAAKH,MAAM,CAAC;EAClE;EAEA;EACAI,iBAAiB;IACf,OAAO,IAAI,CAACN,KAAK,CAACG,MAAM,CAACC,IAAI,IAAI,CAACA,IAAI,CAACC,cAAc,CAAC;EACxD;EAEA;EACAE,WAAW,CAACL,MAAc,EAAEM,eAAyB;IACnD;IACAA,eAAe,CAACC,OAAO,CAACC,MAAM,IAAG;MAC/B,MAAMN,IAAI,GAAG,IAAI,CAACJ,KAAK,CAACW,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACxB,EAAE,KAAKsB,MAAM,CAAC;MAClD,IAAIN,IAAI,EAAE;QACRA,IAAI,CAACC,cAAc,GAAGH,MAAM;;IAEhC,CAAC,CAAC;IACF;IACA,OAAO;MAAEW,SAAS,EAAE,IAAI;MAAEC,OAAO,EAAE;IAA8B,CAAE;EACrE;;;uBA7DW5B,WAAW;IAAA;EAAA;;;aAAXA,WAAW;MAAA6B,SAAX7B,WAAW;MAAA8B,YAFV;IAAM;EAAA","names":["TaskService","constructor","id","shortDescription","difficulty","taskType","implementationContent","status","deadline","Date","deploymentScope","listOfServices","listOfServers","getAllTasks","tasks","getAssignedTasks","userId","filter","task","assignedUserId","getAvailableTasks","assignTasks","selectedTaskIds","forEach","taskId","find","t","isSuccess","message","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\oracle.admin\\source\\ProService\\task-manager-frontend\\src\\app\\services\\task.service.ts"],"sourcesContent":["// src/app/services/task.service.ts\nimport { Injectable } from '@angular/core';\nimport { Task } from '../models/task.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TaskService {\n  // Mocked task list: include at least some tasks with various difficulty, assignment states, etc.\n  private tasks: Task[] = [\n    {\n      id: 101,\n      shortDescription: 'Implement login functionality',\n      difficulty: 3,\n      taskType: 'Implementation',\n      implementationContent: 'Develop user authentication module.',\n      status: 'ToDo'\n    },\n    {\n      id: 102,\n      shortDescription: 'Deploy new feature',\n      difficulty: 4,\n      taskType: 'Deployment',\n      deadline: new Date('2025-08-20'),\n      deploymentScope: 'Deploy the new dashboard feature.',\n      status: 'ToDo'\n    },\n    {\n      id: 103,\n      shortDescription: 'Server maintenance',\n      difficulty: 5,\n      taskType: 'Maintenance',\n      deadline: new Date('2025-09-01'),\n      listOfServices: 'Patch update, disk cleanup',\n      listOfServers: 'Server1, Server2',\n      status: 'ToDo'\n    },\n    // ... Add enough tasks to meet your requirements (e.g., at least 15 tasks overall)\n  ];\n\n  constructor() { }\n\n  // Returns all tasks (for pagination, you might later modify this method)\n  getAllTasks(): Task[] {\n    return this.tasks;\n  }\n\n  // Returns tasks that are already assigned to a specific user\n  getAssignedTasks(userId: number): Task[] {\n    return this.tasks.filter(task => task.assignedUserId === userId);\n  }\n\n  // Returns tasks that are not assigned (available for assignment)\n  getAvailableTasks(): Task[] {\n    return this.tasks.filter(task => !task.assignedUserId);\n  }\n\n  // Assigns selected tasks to a user and returns a response object\n  assignTasks(userId: number, selectedTaskIds: number[]): { isSuccess: boolean, message: string } {\n    // Loop through tasks and assign if valid\n    selectedTaskIds.forEach(taskId => {\n      const task = this.tasks.find(t => t.id === taskId);\n      if (task) {\n        task.assignedUserId = userId;\n      }\n    });\n    // In real scenarios, here you'd add additional validation and maybe failure responses\n    return { isSuccess: true, message: 'Tasks assigned successfully.' };\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}