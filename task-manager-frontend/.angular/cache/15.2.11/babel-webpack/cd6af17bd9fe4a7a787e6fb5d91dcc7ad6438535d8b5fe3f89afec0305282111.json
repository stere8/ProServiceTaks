{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/user.service\";\nimport * as i2 from \"../../services/task.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"../user-list/user-list.component\";\nimport * as i5 from \"../assigned-tasks/assigned-tasks.component\";\nimport * as i6 from \"../available-tasks/available-tasks.component\";\nfunction TaskAssignmentComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"h2\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"div\", 3);\n    i0.ɵɵelement(4, \"app-assigned-tasks\", 4);\n    i0.ɵɵelementStart(5, \"app-available-tasks\", 5);\n    i0.ɵɵlistener(\"assignTasks\", function TaskAssignmentComponent_div_2_Template_app_available_tasks_assignTasks_5_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.onAssignTasks($event));\n    });\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Task Assignment for: \", ctx_r0.selectedUser.nameAndSurname, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"tasks\", ctx_r0.assignedTasks);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"tasks\", ctx_r0.availableTasks);\n  }\n}\nexport class TaskAssignmentComponent {\n  constructor(userService, taskService) {\n    this.userService = userService;\n    this.taskService = taskService;\n    this.users = [];\n    this.assignedTasks = [];\n    this.availableTasks = [];\n  }\n  ngOnInit() {\n    this.userService.getUsers().subscribe({\n      next: users => {\n        console.log('fetched users:', users);\n        this.users = users;\n      },\n      error: err => {\n        console.error('getUsers failed', err);\n      }\n    });\n  }\n  onUserSelected(user) {\n    this.selectedUser = user;\n    // must pass user.id and subscribe\n    this.taskService.getAssignedTasks(user.id).subscribe({\n      next: tasks => {\n        this.assignedTasks = tasks.sort((a, b) => b.difficulty - a.difficulty).slice(0, 10);\n      },\n      error: err => {\n        console.error('getAssignedTasks failed', err);\n      }\n    });\n    this.taskService.getAvailableTasks(user.id).subscribe({\n      next: tasks => {\n        this.availableTasks = tasks.sort((a, b) => b.difficulty - a.difficulty).slice(0, 10);\n      },\n      error: err => {\n        console.error('getAvailableTasks failed', err);\n      }\n    });\n  }\n  onAssignTasks(taskIds) {\n    if (!this.selectedUser) return;\n    // subscribe to the POST Observable\n    this.taskService.assignTasks(this.selectedUser.id, taskIds).subscribe(response => {\n      if (response.isSuccess) {\n        // refresh lists after successful assignment\n        this.onUserSelected(this.selectedUser);\n      } else {\n        alert('Assignment failed: ' + response.message);\n      }\n    }, err => {\n      console.error('HTTP error', err);\n      alert('Server error during assignment');\n    });\n  }\n  static {\n    this.ɵfac = function TaskAssignmentComponent_Factory(t) {\n      return new (t || TaskAssignmentComponent)(i0.ɵɵdirectiveInject(i1.UserService), i0.ɵɵdirectiveInject(i2.TaskService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: TaskAssignmentComponent,\n      selectors: [[\"app-task-assignment\"]],\n      decls: 3,\n      vars: 2,\n      consts: [[1, \"task-assignment-container\"], [3, \"users\", \"userSelected\"], [4, \"ngIf\"], [1, \"tasks-section\"], [3, \"tasks\"], [3, \"tasks\", \"assignTasks\"]],\n      template: function TaskAssignmentComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"app-user-list\", 1);\n          i0.ɵɵlistener(\"userSelected\", function TaskAssignmentComponent_Template_app_user_list_userSelected_1_listener($event) {\n            return ctx.onUserSelected($event);\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(2, TaskAssignmentComponent_div_2_Template, 6, 3, \"div\", 2);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"users\", ctx.users);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.selectedUser);\n        }\n      },\n      dependencies: [i3.NgIf, i4.UserListComponent, i5.AssignedTasksComponent, i6.AvailableTasksComponent],\n      styles: [\".task-assignment-container[_ngcontent-%COMP%] {\\r\\n    margin: 20px;\\r\\n  }\\r\\n  .tasks-section[_ngcontent-%COMP%] {\\r\\n    display: flex;\\r\\n    gap: 20px;\\r\\n    margin-top: 20px;\\r\\n  }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy90YXNrLWFzc2lnbm1lbnQvdGFzay1hc3NpZ25tZW50LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMERBQTBEO0FBQzFEO0lBQ0ksWUFBWTtFQUNkO0VBQ0E7SUFDRSxhQUFhO0lBQ2IsU0FBUztJQUNULGdCQUFnQjtFQUNsQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIEJhc2ljIHN0eWxlcyBmb3IgbGF5b3V0w6LCgMKUZmVlbCBmcmVlIHRvIGFkanVzdCBhcyBuZWVkZWQgKi9cclxuLnRhc2stYXNzaWdubWVudC1jb250YWluZXIge1xyXG4gICAgbWFyZ2luOiAyMHB4O1xyXG4gIH1cclxuICAudGFza3Mtc2VjdGlvbiB7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgZ2FwOiAyMHB4O1xyXG4gICAgbWFyZ2luLXRvcDogMjBweDtcclxuICB9XHJcbiAgIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["i0","TaskAssignmentComponent","constructor","userService","taskService","ngOnInit","getUsers","subscribe","next","users","console","log","error","err","onUserSelected","user","selectedUser","getAssignedTasks","id","tasks","assignedTasks","sort","a","b","difficulty","slice","getAvailableTasks","availableTasks","onAssignTasks","taskIds","assignTasks","response","isSuccess","alert","message","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\oracle.admin\\source\\ProService\\ProServiceTaks\\task-manager-frontend\\src\\app\\components\\task-assignment\\task-assignment.component.html","C:\\Users\\oracle.admin\\source\\ProService\\ProServiceTaks\\task-manager-frontend\\src\\app\\components\\task-assignment\\task-assignment.component.ts"],"sourcesContent":["<div class=\"task-assignment-container\">\n    <!-- User List Component: Pass the array of users and bind to userSelected event -->\n    <app-user-list [users]=\"users\" (userSelected)=\"onUserSelected($event)\"></app-user-list>\n    \n    <!-- Once a user is selected, display the task assignment section -->\n    <div *ngIf=\"selectedUser\">\n      <h2>Task Assignment for: {{ selectedUser.nameAndSurname }}</h2>\n      \n      <!-- Container for tasks -->\n      <div class=\"tasks-section\">\n        <!-- Assigned Tasks Component -->\n        <app-assigned-tasks [tasks]=\"assignedTasks\"></app-assigned-tasks>\n        \n        <!-- Available Tasks Component -->\n        <app-available-tasks \n            [tasks]=\"availableTasks\" \n            (assignTasks)=\"onAssignTasks($event)\">\n        </app-available-tasks>\n      </div>\n    </div>\n  </div>\n  ","// src/app/components/task-assignment/task-assignment.component.ts\nimport { Component, OnInit } from '@angular/core';\nimport { User } from '../../models/user.model';\nimport { Task } from '../../models/task.model';\nimport { UserService } from '../../services/user.service';\nimport { TaskService } from '../../services/task.service';\n\n@Component({\n  selector: 'app-task-assignment',\n  templateUrl: './task-assignment.component.html',\n  styleUrls: ['./task-assignment.component.css']\n})\nexport class TaskAssignmentComponent implements OnInit {\n  users: User[] = [];\n  selectedUser?: User;\n  assignedTasks: Task[] = [];\n  availableTasks: Task[] = [];\n\n  constructor(\n    private userService: UserService,\n    private taskService: TaskService\n  ) {}\n\n  ngOnInit(): void {\n    this.userService.getUsers()\n      .subscribe({\n        next: users => {\n          console.log('fetched users:', users);\n          this.users = users;\n        },\n        error: err => {\n          console.error('getUsers failed', err);\n        }\n      });\n  }\n  \n  onUserSelected(user: User): void {\n    this.selectedUser = user;\n\n    // must pass user.id and subscribe\n    this.taskService.getAssignedTasks(user.id)\n      .subscribe({\n        next : tasks => {\n        this.assignedTasks = tasks\n          .sort((a,b) => b.difficulty - a.difficulty)\n          .slice(0, 10);\n      },\n        error: err => {\n          console.error('getAssignedTasks failed', err);\n        }\n      });\n\n    this.taskService.getAvailableTasks(user.id)\n      .subscribe({\n        next : tasks => {\n          this.availableTasks = tasks\n            .sort((a,b) => b.difficulty - a.difficulty)\n            .slice(0, 10);\n      },\n        error: err => {\n          console.error('getAvailableTasks failed', err);\n        }\n      });\n  }\n\n  onAssignTasks(taskIds: number[]): void {\n    if (!this.selectedUser) return;\n\n    // subscribe to the POST Observable\n    this.taskService.assignTasks(this.selectedUser.id, taskIds)\n      .subscribe(response => {\n        if (response.isSuccess) {\n          // refresh lists after successful assignment\n          this.onUserSelected(this.selectedUser!);\n        } else {\n          alert('Assignment failed: ' + response.message);\n        }\n      }, err => {\n        console.error('HTTP error', err);\n        alert('Server error during assignment');\n      });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}