{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { map, catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TaskService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'https://localhost:7281/api/tasks';\n  }\n  /**\r\n   * Assigned tasks come from GET /api/tasks/user/{id}\r\n   * Returns Task[] directly—no pagination wrapper here.\r\n   */\n  getAssignedTasks(userId) {\n    return this.http.get(`${this.baseUrl}/user/${userId}`);\n  }\n  getAllTasks(userId) {\n    const params = new HttpParams().set('page', '1').set('pageSize', '100');\n    return this.http.get(`${this.baseUrl}`, {\n      params\n    }).pipe(tap(resp => console.log('[TaskService] all tasks:', resp.data)),\n    // ← before filter\n    map(resp => resp.data.filter(t => t.assignedUserId === null)), tap(tasks => console.log('[TaskService] unassigned tasks:', tasks)) // ← after filter\n    );\n  }\n  /**\r\n   * Available tasks: since there's no /available endpoint,\r\n   * we fetch all (paginated) then filter out assigned ones.\r\n   * GET /api/tasks?page=1&pageSize=100 (or whatever max you need)\r\n   */\n  getAvailableTasks(userId) {\n    const params = new HttpParams().set('page', '1').set('pageSize', '10');\n    return this.http.get(`${this.baseUrl}/unassigned`, {\n      params\n    }).pipe(tap(resp => console.log('[TaskService] all vailavle tasks tasks:', resp.data)),\n    // ← before filter\n    map(resp => resp.data.filter(t => t.assignedUserId === null)), tap(tasks => console.log('[TaskService] unassigned tasks:', tasks)) // ← after filter\n    );\n  }\n  /**\r\n   * Assign endpoint is POST /api/tasks/assign\r\n   * It returns 200 + message on success, or 400 + message on failure.\r\n   * We capture both cases and normalize to { isSuccess, message }.\r\n   */\n  assignTasks(userId, taskIds) {\n    return this.http.post(`${this.baseUrl}/assign`, {\n      userId,\n      taskIds\n    }, {\n      observe: 'response'\n    }).pipe(map(resp => ({\n      isSuccess: resp.status === 200,\n      message: resp.body || 'OK'\n    })), catchError(err => of({\n      isSuccess: false,\n      message: err.error || err.statusText || 'Assignment failed'\n    })));\n  }\n  static {\n    this.ɵfac = function TaskService_Factory(t) {\n      return new (t || TaskService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TaskService,\n      factory: TaskService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AAEA,SAAqBA,UAAU,QAAsB,sBAAsB;AAC3E,SAAqBC,EAAE,QAAQ,MAAM;AACrC,SAASC,GAAG,EAAEC,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;;;AAOrD,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,YAAO,GAAG,kCAAkC;EAEZ;EAExC;;;;EAIAC,gBAAgB,CAACC,MAAc;IAC7B,OAAO,IAAI,CAACF,IAAI,CACbG,GAAG,CAAS,GAAG,IAAI,CAACC,OAAO,SAASF,MAAM,EAAE,CAAC;EAClD;EAEAG,WAAW,CAACH,MAAc;IACxB,MAAMI,MAAM,GAAG,IAAIb,UAAU,EAAE,CAC5Bc,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,CAChBA,GAAG,CAAC,UAAU,EAAE,KAAK,CAAC;IAEzB,OAAO,IAAI,CAACP,IAAI,CACbG,GAAG,CAA0B,GAAG,IAAI,CAACC,OAAO,EAAE,EAAE;MAAEE;IAAM,CAAE,CAAC,CAC3DE,IAAI,CACHX,GAAG,CAACY,IAAI,IAAMC,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEF,IAAI,CAACG,IAAI,CAAC,CAAC;IAAW;IAC5EjB,GAAG,CAACc,IAAI,IAAMA,IAAI,CAACG,IAAI,CAACC,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,cAAc,KAAK,IAAI,CAAC,CAAC,EAC/DlB,GAAG,CAACmB,KAAK,IAAKN,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEK,KAAK,CAAC,CAAC,CAAS;IAAA,CAC9E;EACL;EAGA;;;;;EAKAC,iBAAiB,CAACf,MAAc;IAC9B,MAAMI,MAAM,GAAG,IAAIb,UAAU,EAAE,CAC5Bc,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,CAChBA,GAAG,CAAC,UAAU,EAAE,IAAI,CAAC;IAExB,OAAO,IAAI,CAACP,IAAI,CAEfG,GAAG,CAA0B,GAAG,IAAI,CAACC,OAAO,aAAa,EAAE;MAAEE;IAAM,CAAE,CAAC,CACtEE,IAAI,CACDX,GAAG,CAACY,IAAI,IAAMC,OAAO,CAACC,GAAG,CAAC,yCAAyC,EAAEF,IAAI,CAACG,IAAI,CAAC,CAAC;IAAW;IAM3FjB,GAAG,CAACc,IAAI,IAAMA,IAAI,CAACG,IAAI,CAACC,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,cAAc,KAAK,IAAI,CAAC,CAAC,EAC/DlB,GAAG,CAACmB,KAAK,IAAKN,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEK,KAAK,CAAC,CAAC,CAAS;IAAA,CAC9E;EACL;EAEA;;;;;EAKAE,WAAW,CAAChB,MAAc,EAAEiB,OAAiB;IAC3C,OAAO,IAAI,CAACnB,IAAI,CACboB,IAAI,CAAS,GAAG,IAAI,CAAChB,OAAO,SAAS,EAAE;MAAEF,MAAM;MAAEiB;IAAO,CAAE,EAAE;MAAEE,OAAO,EAAE;IAAU,CAAE,CAAC,CACpFb,IAAI,CACHb,GAAG,CAAEc,IAA0B,KAAM;MACnCa,SAAS,EAAEb,IAAI,CAACc,MAAM,KAAK,GAAG;MAC9BC,OAAO,EAAEf,IAAI,CAACgB,IAAI,IAAI;KACvB,CAAC,CAAC,EACH7B,UAAU,CAAC8B,GAAG,IACZhC,EAAE,CAAC;MACD4B,SAAS,EAAE,KAAK;MAChBE,OAAO,EAAEE,GAAG,CAACC,KAAK,IAAID,GAAG,CAACE,UAAU,IAAI;KACzC,CAAC,CACH,CACF;EACL;;;uBA1EW9B,WAAW;IAAA;EAAA;;;aAAXA,WAAW;MAAA+B,SAAX/B,WAAW;MAAAgC,YAFV;IAAM;EAAA","names":["HttpParams","of","map","catchError","tap","TaskService","constructor","http","getAssignedTasks","userId","get","baseUrl","getAllTasks","params","set","pipe","resp","console","log","data","filter","t","assignedUserId","tasks","getAvailableTasks","assignTasks","taskIds","post","observe","isSuccess","status","message","body","err","error","statusText","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\oracle.admin\\source\\ProService\\ProServiceTaks\\task-manager-frontend\\src\\app\\services\\task.service.ts"],"sourcesContent":["// src/app/services/task.service.ts\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams, HttpResponse } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { map, catchError, tap } from 'rxjs/operators';\r\nimport { Task } from '../models/task.model';\r\nimport { PaginatedResponse } from '../models/paginated-response';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TaskService {\r\n  private baseUrl = 'https://localhost:7281/api/tasks';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  /**\r\n   * Assigned tasks come from GET /api/tasks/user/{id}\r\n   * Returns Task[] directly—no pagination wrapper here.\r\n   */\r\n  getAssignedTasks(userId: number): Observable<Task[]> {\r\n    return this.http\r\n      .get<Task[]>(`${this.baseUrl}/user/${userId}`);\r\n  }\r\n\r\n  getAllTasks(userId: number): Observable<Task[]> {\r\n    const params = new HttpParams()\r\n      .set('page', '1')\r\n      .set('pageSize', '100');\r\n  \r\n    return this.http\r\n      .get<PaginatedResponse<Task>>(`${this.baseUrl}`, { params })\r\n      .pipe(\r\n        tap(resp   => console.log('[TaskService] all tasks:', resp.data)),          // ← before filter\r\n        map(resp   => resp.data.filter(t => t.assignedUserId === null)),\r\n        tap(tasks  => console.log('[TaskService] unassigned tasks:', tasks))         // ← after filter\r\n      );\r\n  }\r\n\r\n\r\n  /**\r\n   * Available tasks: since there's no /available endpoint,\r\n   * we fetch all (paginated) then filter out assigned ones.\r\n   * GET /api/tasks?page=1&pageSize=100 (or whatever max you need)\r\n   */\r\n  getAvailableTasks(userId: number): Observable<Task[]> {\r\n    const params = new HttpParams()\r\n      .set('page', '1')\r\n      .set('pageSize', '10');\r\n  \r\n    return this.http\r\n<<<<<<< HEAD\r\n    .get<PaginatedResponse<Task>>(`${this.baseUrl}/unassigned`, { params })\r\n    .pipe(\r\n        tap(resp   => console.log('[TaskService] all vailavle tasks tasks:', resp.data)),          // ← before filter\r\n=======\r\n      .get<PaginatedResponse<Task>>(`${this.baseUrl}`, { params })\r\n      .pipe(\r\n        tap(resp   => console.log('[TaskService] all tasks:', resp.data)),          // ← before filter\r\n>>>>>>> 057456ace38fd0ef60cbcdaf3e57227094bb62ad\r\n        map(resp   => resp.data.filter(t => t.assignedUserId === null)),\r\n        tap(tasks  => console.log('[TaskService] unassigned tasks:', tasks))         // ← after filter\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Assign endpoint is POST /api/tasks/assign\r\n   * It returns 200 + message on success, or 400 + message on failure.\r\n   * We capture both cases and normalize to { isSuccess, message }.\r\n   */\r\n  assignTasks(userId: number, taskIds: number[]): Observable<{ isSuccess: boolean; message: string }> {\r\n    return this.http\r\n      .post<string>(`${this.baseUrl}/assign`, { userId, taskIds }, { observe: 'response' })\r\n      .pipe(\r\n        map((resp: HttpResponse<string>) => ({\r\n          isSuccess: resp.status === 200,\r\n          message: resp.body || 'OK'\r\n        })),\r\n        catchError(err =>\r\n          of({\r\n            isSuccess: false,\r\n            message: err.error || err.statusText || 'Assignment failed'\r\n          })\r\n        )\r\n      );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}