{"ast":null,"code":"import { __decorate } from \"tslib\";\nexport class AvailableTasksComponent {\n  constructor() {\n    this.tasks = [];\n    this.assignTasks = new EventEmitter();\n    this.pageChange = new EventEmitter();\n    this.selectedTaskIds = [];\n    this.currentPage = 1;\n    this.pageSize = 10;\n  }\n  // Add pagination methods\n  previousPage() {\n    if (this.currentPage > 1) {\n      this.currentPage--;\n      this.pageChange.emit(this.currentPage);\n    }\n  }\n  nextPage() {\n    this.currentPage++;\n    this.pageChange.emit(this.currentPage);\n  }\n  // Existing methods remain the same\n  toggleSelection(task) {\n    const index = this.selectedTaskIds.indexOf(task.id);\n    if (index !== -1) {\n      this.selectedTaskIds.splice(index, 1);\n    } else {\n      this.selectedTaskIds.push(task.id);\n    }\n  }\n  assignSelected() {\n    if (this.selectedTaskIds.length > 0) {\n      this.assignTasks.emit(this.selectedTaskIds);\n      this.selectedTaskIds = [];\n    }\n  }\n}\n__decorate([Input()], AvailableTasksComponent.prototype, \"tasks\", void 0);\n__decorate([Output()], AvailableTasksComponent.prototype, \"assignTasks\", void 0);\n__decorate([Output()], AvailableTasksComponent.prototype, \"pageChange\", void 0);","map":{"version":3,"mappings":";AAAA,OAAM,MAAOA,uBAAuB;EAApCC;IACW,UAAK,GAAW,EAAE;IACjB,gBAAW,GAAG,IAAIC,YAAY,EAAY;IAC1C,eAAU,GAAG,IAAIA,YAAY,EAAU;IAEjD,oBAAe,GAAa,EAAE;IAC9B,gBAAW,GAAG,CAAC;IACf,aAAQ,GAAG,EAAE;EA+Bf;EA7BE;EACAC,YAAY;IACV,IAAI,IAAI,CAACC,WAAW,GAAG,CAAC,EAAE;MACxB,IAAI,CAACA,WAAW,EAAE;MAClB,IAAI,CAACC,UAAU,CAACC,IAAI,CAAC,IAAI,CAACF,WAAW,CAAC;;EAE1C;EAEAG,QAAQ;IACN,IAAI,CAACH,WAAW,EAAE;IAClB,IAAI,CAACC,UAAU,CAACC,IAAI,CAAC,IAAI,CAACF,WAAW,CAAC;EACxC;EAEA;EACAI,eAAe,CAACC,IAAU;IACxB,MAAMC,KAAK,GAAG,IAAI,CAACC,eAAe,CAACC,OAAO,CAACH,IAAI,CAACI,EAAE,CAAC;IACnD,IAAIH,KAAK,KAAK,CAAC,CAAC,EAAE;MAChB,IAAI,CAACC,eAAe,CAACG,MAAM,CAACJ,KAAK,EAAE,CAAC,CAAC;KACtC,MAAM;MACL,IAAI,CAACC,eAAe,CAACI,IAAI,CAACN,IAAI,CAACI,EAAE,CAAC;;EAEtC;EAEAG,cAAc;IACZ,IAAI,IAAI,CAACL,eAAe,CAACM,MAAM,GAAG,CAAC,EAAE;MACnC,IAAI,CAACC,WAAW,CAACZ,IAAI,CAAC,IAAI,CAACK,eAAe,CAAC;MAC3C,IAAI,CAACA,eAAe,GAAG,EAAE;;EAE7B;;AApCSQ,YAARC,KAAK,EAAE,sDAAoB;AAClBD,YAATE,MAAM,EAAE,4DAA4C;AAC3CF,YAATE,MAAM,EAAE,2DAAyC","names":["AvailableTasksComponent","constructor","EventEmitter","previousPage","currentPage","pageChange","emit","nextPage","toggleSelection","task","index","selectedTaskIds","indexOf","id","splice","push","assignSelected","length","assignTasks","__decorate","Input","Output"],"sourceRoot":"","sources":["C:\\Users\\oracle.admin\\source\\ProService\\ProServiceTaks\\task-manager-frontend\\src\\app\\components\\available-tasks\\available-tasks.component.ts"],"sourcesContent":["export class AvailableTasksComponent {\n  @Input() tasks: Task[] = [];\n  @Output() assignTasks = new EventEmitter<number[]>();\n  @Output() pageChange = new EventEmitter<number>();\n\n  selectedTaskIds: number[] = [];\n  currentPage = 1;\n  pageSize = 10;\n\n  // Add pagination methods\n  previousPage(): void {\n    if (this.currentPage > 1) {\n      this.currentPage--;\n      this.pageChange.emit(this.currentPage);\n    }\n  }\n\n  nextPage(): void {\n    this.currentPage++;\n    this.pageChange.emit(this.currentPage);\n  }\n\n  // Existing methods remain the same\n  toggleSelection(task: Task): void {\n    const index = this.selectedTaskIds.indexOf(task.id);\n    if (index !== -1) {\n      this.selectedTaskIds.splice(index, 1);\n    } else {\n      this.selectedTaskIds.push(task.id);\n    }\n  }\n\n  assignSelected(): void {\n    if (this.selectedTaskIds.length > 0) {\n      this.assignTasks.emit(this.selectedTaskIds);\n      this.selectedTaskIds = [];\n    }\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}