{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/user.service\";\nimport * as i2 from \"../../services/task.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"../user-list/user-list.component\";\nimport * as i5 from \"../assigned-tasks/assigned-tasks.component\";\nimport * as i6 from \"../available-tasks/available-tasks.component\";\nfunction TaskAssignmentComponent_div_2_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 8)(1, \"button\", 9);\n    i0.ɵɵlistener(\"click\", function TaskAssignmentComponent_div_2_div_2_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r3.previousPage());\n    });\n    i0.ɵɵtext(2, \" Previous \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"span\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"button\", 9);\n    i0.ɵɵlistener(\"click\", function TaskAssignmentComponent_div_2_div_2_Template_button_click_5_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r5 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r5.nextPage());\n    });\n    i0.ɵɵtext(6, \" Next \");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"disabled\", ctx_r2.currentPage === 1);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate2(\"Page \", ctx_r2.currentPage, \" of \", ctx_r2.totalPages, \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"disabled\", ctx_r2.currentPage === ctx_r2.totalPages);\n  }\n}\nfunction TaskAssignmentComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 4)(1, \"app-available-tasks\", 5);\n    i0.ɵɵlistener(\"assignTasks\", function TaskAssignmentComponent_div_2_Template_app_available_tasks_assignTasks_1_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.onAssignTasks($event));\n    })(\"pageChange\", function TaskAssignmentComponent_div_2_Template_app_available_tasks_pageChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r7);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.onPageChange($event));\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(2, TaskAssignmentComponent_div_2_div_2_Template, 7, 4, \"div\", 6);\n    i0.ɵɵelement(3, \"app-assigned-tasks\", 7);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"tasks\", ctx_r0.availableTasks);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.totalPages > 1);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"tasks\", ctx_r0.assignedTasks);\n  }\n}\nfunction TaskAssignmentComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵtext(1, \" Please select a user to view and assign tasks. \");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class TaskAssignmentComponent {\n  onAssignTasks(taskIds) {\n    if (!this.selectedUser) {\n      return;\n    }\n    this.taskService.assignTasks(this.selectedUser.id, taskIds).subscribe({\n      next: () => {\n        this.onUserSelected(this.selectedUser);\n      },\n      error: error => {\n        console.error('Error assigning tasks:', error);\n        alert('Failed to assign tasks. Please try again later.');\n      }\n    });\n  }\n  constructor(userService, taskService) {\n    this.userService = userService;\n    this.taskService = taskService;\n    this.users = [];\n    this.assignedTasks = [];\n    this.availableTasks = [];\n    this.currentPage = 1;\n    this.pageSize = 10;\n    this.totalPages = 0;\n  }\n  ngOnInit() {\n    throw new Error('Method not implemented.');\n  }\n  loadAvailableTasks() {\n    if (!this.selectedUser) return;\n    this.taskService.getAvailableTasks(this.selectedUser.id, this.currentPage, this.pageSize).subscribe({\n      next: response => {\n        this.availableTasks = response.data;\n        this.totalPages = response.totalPages;\n        this.currentPage = response.page;\n      },\n      error: err => {\n        console.error('Failed to load available tasks', err);\n      }\n    });\n  }\n  onUserSelected(user) {\n    this.selectedUser = user;\n    this.currentPage = 1; // Reset to first page when user changes\n    this.loadAvailableTasks();\n  }\n  onPageChange(newPage) {\n    this.currentPage = newPage;\n    this.loadAvailableTasks();\n  }\n  nextPage() {\n    if (this.currentPage < this.totalPages) {\n      this.onPageChange(this.currentPage + 1);\n    }\n  }\n  previousPage() {\n    if (this.currentPage > 1) {\n      this.onPageChange(this.currentPage - 1);\n    }\n  }\n  static {\n    this.ɵfac = function TaskAssignmentComponent_Factory(t) {\n      return new (t || TaskAssignmentComponent)(i0.ɵɵdirectiveInject(i1.UserService), i0.ɵɵdirectiveInject(i2.TaskService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: TaskAssignmentComponent,\n      selectors: [[\"app-task-assignment\"]],\n      decls: 4,\n      vars: 3,\n      consts: [[1, \"task-assignment-container\"], [3, \"users\", \"userSelected\"], [\"class\", \"tasks-section\", 4, \"ngIf\"], [\"class\", \"no-user-message\", 4, \"ngIf\"], [1, \"tasks-section\"], [3, \"tasks\", \"assignTasks\", \"pageChange\"], [\"class\", \"pagination-controls\", 4, \"ngIf\"], [3, \"tasks\"], [1, \"pagination-controls\"], [3, \"disabled\", \"click\"], [1, \"no-user-message\"]],\n      template: function TaskAssignmentComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"app-user-list\", 1);\n          i0.ɵɵlistener(\"userSelected\", function TaskAssignmentComponent_Template_app_user_list_userSelected_1_listener($event) {\n            return ctx.onUserSelected($event);\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(2, TaskAssignmentComponent_div_2_Template, 4, 3, \"div\", 2);\n          i0.ɵɵtemplate(3, TaskAssignmentComponent_div_3_Template, 2, 0, \"div\", 3);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"users\", ctx.users);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.selectedUser);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", !ctx.selectedUser);\n        }\n      },\n      dependencies: [i3.NgIf, i4.UserListComponent, i5.AssignedTasksComponent, i6.AvailableTasksComponent],\n      styles: [\".task-assignment-container[_ngcontent-%COMP%] {\\r\\n    margin: 20px;\\r\\n  }\\r\\n  .tasks-section[_ngcontent-%COMP%] {\\r\\n    display: flex;\\r\\n    gap: 20px;\\r\\n    margin-top: 20px;\\r\\n  }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy90YXNrLWFzc2lnbm1lbnQvdGFzay1hc3NpZ25tZW50LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMERBQTBEO0FBQzFEO0lBQ0ksWUFBWTtFQUNkO0VBQ0E7SUFDRSxhQUFhO0lBQ2IsU0FBUztJQUNULGdCQUFnQjtFQUNsQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIEJhc2ljIHN0eWxlcyBmb3IgbGF5b3V0w6LCgMKUZmVlbCBmcmVlIHRvIGFkanVzdCBhcyBuZWVkZWQgKi9cclxuLnRhc2stYXNzaWdubWVudC1jb250YWluZXIge1xyXG4gICAgbWFyZ2luOiAyMHB4O1xyXG4gIH1cclxuICAudGFza3Mtc2VjdGlvbiB7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgZ2FwOiAyMHB4O1xyXG4gICAgbWFyZ2luLXRvcDogMjBweDtcclxuICB9XHJcbiAgIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"mappings":"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","names":["i0","TaskAssignmentComponent","onAssignTasks","taskIds","selectedUser","taskService","assignTasks","id","subscribe","next","onUserSelected","error","console","alert","constructor","userService","ngOnInit","Error","loadAvailableTasks","getAvailableTasks","currentPage","pageSize","response","availableTasks","data","totalPages","page","err","user","onPageChange","newPage","nextPage","previousPage","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\oracle.admin\\source\\ProService\\ProServiceTaks\\task-manager-frontend\\src\\app\\components\\task-assignment\\task-assignment.component.html","C:\\Users\\oracle.admin\\source\\ProService\\ProServiceTaks\\task-manager-frontend\\src\\app\\components\\task-assignment\\task-assignment.component.ts"],"sourcesContent":["<div class=\"task-assignment-container\">\n  <!-- User Selection Section -->\n  <app-user-list \n    [users]=\"users\" \n    (userSelected)=\"onUserSelected($event)\">\n  </app-user-list>\n\n  <!-- Tasks Section -->\n  <div class=\"tasks-section\" *ngIf=\"selectedUser\">\n    <!-- Available Tasks -->\n    <app-available-tasks \n      [tasks]=\"availableTasks\" \n      (assignTasks)=\"onAssignTasks($event)\"\n      (pageChange)=\"onPageChange($event)\">\n    </app-available-tasks>\n\n    <!-- Pagination Controls -->\n    <div class=\"pagination-controls\" *ngIf=\"totalPages > 1\">\n      <button \n        [disabled]=\"currentPage === 1\" \n        (click)=\"previousPage()\">\n        Previous\n      </button>\n      <span>Page {{currentPage}} of {{totalPages}}</span>\n      <button \n        [disabled]=\"currentPage === totalPages\" \n        (click)=\"nextPage()\">\n        Next\n      </button>\n    </div>\n\n    <!-- Assigned Tasks -->\n    <app-assigned-tasks \n      [tasks]=\"assignedTasks\">\n    </app-assigned-tasks>\n  </div>\n\n  <!-- No User Selected Message -->\n  <div class=\"no-user-message\" *ngIf=\"!selectedUser\">\n    Please select a user to view and assign tasks.\n  </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { User } from '../../models/user.model';\nimport { Task } from '../../models/task.model';\nimport { UserService } from '../../services/user.service';\nimport { TaskService } from '../../services/task.service';\nimport { PaginatedResponse } from '../../models/paginated-response';\n\n@Component({\n  selector: 'app-task-assignment',\n  templateUrl: './task-assignment.component.html',\n  styleUrls: ['./task-assignment.component.css']\n})\nexport class TaskAssignmentComponent implements OnInit {\n\n  onAssignTasks(taskIds: number[]): void {\n    if (!this.selectedUser) {\n      return;\n    }\n    \n    this.taskService.assignTasks(this.selectedUser.id, taskIds).subscribe({\n      next: () => {\n        this.onUserSelected(this.selectedUser!);\n      },\n      error: (error) => {\n        console.error('Error assigning tasks:', error);\n        alert('Failed to assign tasks. Please try again later.');\n      }\n    });\n  }\n  \n  users: User[] = [];\n  selectedUser?: User;\n  assignedTasks: Task[] = [];\n  availableTasks: Task[] = [];\n  currentPage = 1;\n  pageSize = 10;\n  totalPages = 0;\n\n  constructor(\n    private userService: UserService,\n    private taskService: TaskService\n  ) {}\n  ngOnInit(): void {\n    throw new Error('Method not implemented.');\n  }\n\n  loadAvailableTasks() {\n    if (!this.selectedUser) return;\n    \n    this.taskService.getAvailableTasks(this.selectedUser.id, this.currentPage, this.pageSize)\n      .subscribe({\n        next: (response: PaginatedResponse<Task>) => {\n          this.availableTasks = response.data;\n          this.totalPages = response.totalPages;\n          this.currentPage = response.page;\n        },\n        error: (err: any) => {\n          console.error('Failed to load available tasks', err);\n        }\n      });\n  }\n\n  onUserSelected(user: User): void {\n    this.selectedUser = user;\n    this.currentPage = 1; // Reset to first page when user changes\n    this.loadAvailableTasks();\n  }\n\n  onPageChange(newPage: number) {\n    this.currentPage = newPage;\n    this.loadAvailableTasks();\n  }\n\n  nextPage() {\n    if (this.currentPage < this.totalPages) {\n      this.onPageChange(this.currentPage + 1);\n    }\n  }\n\n  previousPage() {\n    if (this.currentPage > 1) {\n      this.onPageChange(this.currentPage - 1);\n    }\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}