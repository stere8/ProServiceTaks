{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TaskService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = '/api/tasks';\n  }\n  getAssignedTasks(userId) {\n    return this.http.get(`${this.baseUrl}/assigned/${userId}`).pipe(map(resp => resp.data) // unwrap the Task[] directly\n    );\n  }\n\n  getAvailableTasks(userId) {\n    return this.http.get(`${this.baseUrl}/available/${userId}`).pipe(map(resp => resp.data));\n  }\n  assignTasks(userId, taskIds) {\n    return this.http.post(`${this.baseUrl}/assign/${userId}`, {\n      userId,\n      taskIds\n    });\n  }\n  static {\n    this.ɵfac = function TaskService_Factory(t) {\n      return new (t || TaskService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TaskService,\n      factory: TaskService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AAIA,SAASA,GAAG,QAAQ,gBAAgB;;;AAKpC,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,YAAO,GAAG,YAAY;EAEU;EAExCC,gBAAgB,CAACC,MAAc;IAC7B,OAAO,IAAI,CAACF,IAAI,CACbG,GAAG,CAA0B,GAAG,IAAI,CAACC,OAAO,aAAaF,MAAM,EAAE,CAAC,CAClEG,IAAI,CACHR,GAAG,CAACS,IAAI,IAAIA,IAAI,CAACC,IAAI,CAAC,CAAM;IAAA,CAC7B;EACL;;EAEAC,iBAAiB,CAACN,MAAc;IAC9B,OAAO,IAAI,CAACF,IAAI,CACbG,GAAG,CAA0B,GAAG,IAAI,CAACC,OAAO,cAAcF,MAAM,EAAE,CAAC,CACnEG,IAAI,CACHR,GAAG,CAACS,IAAI,IAAIA,IAAI,CAACC,IAAI,CAAC,CACvB;EACL;EAEAE,WAAW,CAACP,MAAc,EAAEQ,OAAiB;IAC3C,OAAO,IAAI,CAACV,IAAI,CAACW,IAAI,CACnB,GAAG,IAAI,CAACP,OAAO,WAAWF,MAAM,EAAE,EAAE;MAAEA,MAAM;MAAEQ;IAAO,CAAE,CACxD;EACH;;;uBAzBWZ,WAAW;IAAA;EAAA;;;aAAXA,WAAW;MAAAc,SAAXd,WAAW;MAAAe,YADE;IAAM;EAAA","names":["map","TaskService","constructor","http","getAssignedTasks","userId","get","baseUrl","pipe","resp","data","getAvailableTasks","assignTasks","taskIds","post","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\oracle.admin\\source\\ProService\\ProServiceTaks\\task-manager-frontend\\src\\app\\services\\task.service.ts"],"sourcesContent":["// src/app/services/task.service.ts\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Task } from '../models/task.model';\nimport { PaginatedResponse } from '../models/paginated-response';\n\n@Injectable({ providedIn: 'root' })\nexport class TaskService {\n  private baseUrl = '/api/tasks';\n\n  constructor(private http: HttpClient) { }\n\n  getAssignedTasks(userId: number): Observable<Task[]> {\n    return this.http\n      .get<PaginatedResponse<Task>>(`${this.baseUrl}/assigned/${userId}`)\n      .pipe(\n        map(resp => resp.data)      // unwrap the Task[] directly\n      );\n  }\n\n  getAvailableTasks(userId: number): Observable<Task[]> {\n    return this.http\n      .get<PaginatedResponse<Task>>(`${this.baseUrl}/available/${userId}`)\n      .pipe(\n        map(resp => resp.data)\n      );\n  }\n\n  assignTasks(userId: number, taskIds: number[]): Observable<{isSuccess: boolean; message: string}> {\n    return this.http.post<{isSuccess: boolean; message: string}>(\n      `${this.baseUrl}/assign/${userId}`, { userId, taskIds }\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}