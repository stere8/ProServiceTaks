{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nexport class AvailableTasksComponent {\n  constructor() {\n    this.tasks = [];\n    this.assignTasks = new EventEmitter();\n    // Array to track selected task IDs\n    this.selectedTaskIds = [];\n  }\n  // Toggle selection on task click\n  toggleSelection(task) {\n    const index = this.selectedTaskIds.indexOf(task.id);\n    if (index !== -1) {\n      // Already selected: unselect it.\n      this.selectedTaskIds.splice(index, 1);\n    } else {\n      // Not selected: add to selection.\n      this.selectedTaskIds.push(task.id);\n    }\n  }\n  // Emit the list of selected task IDs to assign them\n  assignSelected() {\n    if (this.selectedTaskIds.length > 0) {\n      this.assignTasks.emit(this.selectedTaskIds);\n      // Optionally clear the selection after assignment\n      this.selectedTaskIds = [];\n    }\n  }\n  static {\n    this.ɵfac = function AvailableTasksComponent_Factory(t) {\n      return new (t || AvailableTasksComponent)();\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AvailableTasksComponent,\n      selectors: [[\"app-available-tasks\"]],\n      inputs: {\n        tasks: \"tasks\"\n      },\n      outputs: {\n        assignTasks: \"assignTasks\"\n      },\n      decls: 2,\n      vars: 0,\n      template: function AvailableTasksComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"p\");\n          i0.ɵɵtext(1, \"available-tasks works!\");\n          i0.ɵɵelementEnd();\n        }\n      },\n      styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"mappings":"AAAA,SAAmCA,YAAY,QAAQ,eAAe;;AAQtE,OAAM,MAAOC,uBAAuB;EALpCC;IAMW,UAAK,GAAW,EAAE;IACjB,gBAAW,GAAG,IAAIF,YAAY,EAAY;IAEpD;IACA,oBAAe,GAAa,EAAE;;EAE9B;EACAG,eAAe,CAACC,IAAU;IACxB,MAAMC,KAAK,GAAG,IAAI,CAACC,eAAe,CAACC,OAAO,CAACH,IAAI,CAACI,EAAE,CAAC;IACnD,IAAIH,KAAK,KAAK,CAAC,CAAC,EAAE;MAChB;MACA,IAAI,CAACC,eAAe,CAACG,MAAM,CAACJ,KAAK,EAAE,CAAC,CAAC;KACtC,MAAM;MACL;MACA,IAAI,CAACC,eAAe,CAACI,IAAI,CAACN,IAAI,CAACI,EAAE,CAAC;;EAEtC;EAEA;EACAG,cAAc;IACZ,IAAI,IAAI,CAACL,eAAe,CAACM,MAAM,GAAG,CAAC,EAAE;MACnC,IAAI,CAACC,WAAW,CAACC,IAAI,CAAC,IAAI,CAACR,eAAe,CAAC;MAC3C;MACA,IAAI,CAACA,eAAe,GAAG,EAAE;;EAE7B;;;uBA1BWL,uBAAuB;IAAA;EAAA;;;YAAvBA,uBAAuB;MAAAc;MAAAC;QAAAC;MAAA;MAAAC;QAAAL;MAAA;MAAAM;MAAAC;MAAAC;QAAA;UCRpCC,yBAAG;UAAAA,sCAAsB;UAAAA,iBAAI","names":["EventEmitter","AvailableTasksComponent","constructor","toggleSelection","task","index","selectedTaskIds","indexOf","id","splice","push","assignSelected","length","assignTasks","emit","selectors","inputs","tasks","outputs","decls","vars","template","i0"],"sourceRoot":"","sources":["C:\\Users\\oracle.admin\\source\\ProService\\task-manager-frontend\\src\\app\\components\\available-tasks\\available-tasks.component.ts","C:\\Users\\oracle.admin\\source\\ProService\\task-manager-frontend\\src\\app\\components\\available-tasks\\available-tasks.component.html"],"sourcesContent":["import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { Task } from '../../models/task.model';\n\n@Component({\n  selector: 'app-available-tasks',\n  templateUrl: './available-tasks.component.html',\n  styleUrls: ['./available-tasks.component.css']\n})\nexport class AvailableTasksComponent {\n  @Input() tasks: Task[] = [];\n  @Output() assignTasks = new EventEmitter<number[]>();\n\n  // Array to track selected task IDs\n  selectedTaskIds: number[] = [];\n\n  // Toggle selection on task click\n  toggleSelection(task: Task): void {\n    const index = this.selectedTaskIds.indexOf(task.id);\n    if (index !== -1) {\n      // Already selected: unselect it.\n      this.selectedTaskIds.splice(index, 1);\n    } else {\n      // Not selected: add to selection.\n      this.selectedTaskIds.push(task.id);\n    }\n  }\n\n  // Emit the list of selected task IDs to assign them\n  assignSelected(): void {\n    if (this.selectedTaskIds.length > 0) {\n      this.assignTasks.emit(this.selectedTaskIds);\n      // Optionally clear the selection after assignment\n      this.selectedTaskIds = [];\n    }\n  }\n}\n","<p>available-tasks works!</p>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}